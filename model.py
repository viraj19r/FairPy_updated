import BiasDetection.BiasDetectionMetrics as BiasDetectionMetrics



# print('---------GPT2---------')
# causalObj = BiasDetectionMetrics.CausalLMBiasDetection(model_class='gpt2')

# print('---------Hellinger Distance---------')
# causalObj.hellingerDistance()
# print()
# print()
# print()
# print()
# print()
# print('---------Tok K Overlap(gender)---------')
# causalObj.topKOverlap(bias_type='gender')
# print()
# print()
# print()
# print()
# print()
# print('---------WeatScore(Gender)---------')
# causalObj.WeatScore(bias_type='gender')
# print()
# print()
# print()
# print()
# print()
# print('---------StereoScore(all)---------')
# causalObj.stereoSetScore(bias_type='all')
# print()
# print()
# print()
# print()
# print()
# print('---------Top K Percentage---------')
# causalObj.topKPercentage()
# print()
# print()
# print()
# print()
# print()
# print('---------Log Probability(Religion)---------')
# causalObj.logProbability(bias_type='religion')
# print()
# print()
# print()
# print()
# print()


# print('---------Bert---------')
# maskedObj = BiasDetectionMetrics.MaskedLMBiasDetection(model_class='bert-base-uncased')
# print('---------Log Probability---------')
# maskedObj.logProbability(bias_type='gender')
# print()
# print()
# print()
# print()
# print()
# print('---------F1 Score---------')
# maskedObj.F1Score(bias_type='gender')
# print()
# print()
# print()
# print()
# print()
# print('---------StereoScore(all)---------')
# maskedObj.stereoSetScore(bias_type='all')
# print()
# print()
# print()
# print()
# print()
# print('---------Top K Percentage---------')
# maskedObj.topKPercentage()
# print()
# print()
# print()
# print()
# print()
# print('---------WeatScore(Health)---------')
# maskedObj.WeatScore(bias_type='health')

# Load model directly
from transformers import AutoModel, AutoModelForSequenceClassification
from transformers import AutoTokenizer, BioGptTokenizer,BertForMaskedLM
from transformers import AutoTokenizer, GPT2LMHeadModel

# model = AutoModel.from_pretrained("microsoft/BiomedNLP-KRISSBERT-PubMed-UMLS-EL")
# tokenizer = AutoTokenizer.from_pretrained("microsoft/BiomedNLP-KRISSBERT-PubMed-UMLS-EL")

# from transformers import BioGptTokenizer, BioGptForCausalLM
# model = BioGptForCausalLM.from_pretrained("microsoft/biogpt")
# tokenizer = BioGptTokenizer.from_pretrained("microsoft/biogpt")



def masked_model_metrics(model_name):
    print('---------'+model_name+'---------')

    tokenizer = AutoTokenizer.from_pretrained("emilyalsentzer/Bio_ClinicalBERT")
    model = BertForMaskedLM.from_pretrained("emilyalsentzer/Bio_ClinicalBERT")
    maskedObj = BiasDetectionMetrics.MaskedLMBiasDetection(use_pretrained=False, model = model, tokenizer = tokenizer)

    print('---------Log Probability(gender)---------')
    maskedObj.logProbability(bias_type='gender')
    print('---------Log Probability(religion)---------')
    maskedObj.logProbability(bias_type='religion')
    print('---------Log Probability(Race)---------')
    maskedObj.logProbability(bias_type='race')
    print()
    print()
    print()
    print()
    print()
    print('---------F1 Score---------')
    maskedObj.F1Score(bias_type='gender')
    print()
    print()
    print()
    print()
    print()
    print('---------StereoScore(all)---------')
    maskedObj.stereoSetScore(bias_type='all')
    print()
    print()
    print()
    print()
    print()
    print('---------Top K Percentage---------')
    maskedObj.topKPercentage()
    print()
    print()
    print()
    print()
    print()
    print('---------WeatScore(Health)---------')
    maskedObj.WeatScore(bias_type='health')
    print('---------WeatScore(Age)---------')
    maskedObj.WeatScore(bias_type='age')
    print('---------WeatScore(Gender)---------')
    maskedObj.WeatScore(bias_type='gender')
    print('---------WeatScore(Race)---------')
    maskedObj.WeatScore(bias_type='race')
    print('---------WeatScore(Religion)---------')
    maskedObj.WeatScore(bias_type='religion')
    print('')
    print()
    print()
    print()
    print()
    print()
    print('---------HellingerDistance(Gender)---------')
    maskedObj.hellingerDistance()



def causal_model_metrics(model_name):
    print('---------'+model_name+'---------')

    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = GPT2LMHeadModel.from_pretrained(model_name).to('mps')
    causalObj = BiasDetectionMetrics.CausalLMBiasDetection(use_pretrained=False, model = model, tokenizer = tokenizer)

    # print('---------Hellinger Distance---------')
    # causalObj.hellingerDistance()
    # print()
    # print()
    # print()
    # print()
    # print()
    # print('---------Tok K Overlap(gender)---------')
    # causalObj.topKOverlap(bias_type='gender')
    print()
    print()
    print()
    print()
    print()
    print('---------WeatScore(Gender)---------')
    causalObj.WeatScore(bias_type='gender')
    print()
    print()
    print()
    print()
    print()
    print('---------StereoScore(all)---------')
    causalObj.stereoSetScore(bias_type='all')
    print()
    print()
    print()
    print()
    print()
    print('---------Top K Percentage---------')
    causalObj.topKPercentage()
    print()
    print()
    print()
    print()
    print()
    print('---------Log Probability(Religion)---------')
    causalObj.logProbability(bias_type='religion')
    print()
    print()
    print()
    print()
    print()



# masked_model_metrics("emilyalsentzer/Bio_ClinicalBERT")
# masked_model_metrics("emilyalsentzer/Bio_Discharge_Summary_BERT")
# masked_model_metrics("microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract")
masked_model_metrics("microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract-fulltext")
# causal_model_metrics("microsoft/biogpt")